[tool.poetry]
name = "figma-projects"
version = "0.1.0"
description = "A comprehensive Python library for Figma Projects integration with SDK, CLI, and server interfaces"
authors = ["Figma Projects Team <info@figmaprojects.dev>"]
readme = "README.md"
homepage = "https://github.com/figma/projects-python"
repository = "https://github.com/figma/projects-python"
documentation = "https://figma-projects.readthedocs.io"
keywords = ["figma", "projects", "api", "sdk", "cli"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "figma_projects", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
httpx = "^0.27.0"
pydantic = "^2.7.0"
typer = {version = "^0.12.0", extras = ["all"]}
rich = "^13.7.0"
fastapi = "^0.110.0"
uvicorn = {version = "^0.29.0", extras = ["standard"]}
tenacity = "^8.2.0"
aiocache = "^0.12.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
mypy = "^1.8.0"
ruff = "^0.3.0"
black = "^24.0.0"
isort = "^5.13.0"

[tool.poetry.scripts]
figma-projects = "figma_projects.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = "--cov=figma_projects --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]